# -*- coding: utf-8 -*-
# author: zltningx

from rest_framework.viewsets import ViewSet, ModelViewSet
from rest_framework.response import Response
from rest_framework.filters import SearchFilter, OrderingFilter
from django_filters.rest_framework import DjangoFilterBackend

from apps.vulmannager.models import (
    VulWorkflow, Vulnerability, VulSubWorkflow)
from apps.vulmannager.serializers import (
    VulnerabilitySerializer, VulWorkflowSerializer, VulSubWorkflowSerializer)
from apps.utils.pagination import MyPageNumberPagination
from apps.vulmannager.filters import VulWorkflowFilterBackend, StatusFilterBackend
from apps.vulmannager.permissions import VulIsEditorOrReadOnly


class VulnerabilityViewSet(ModelViewSet):
    permission_classes = [VulIsEditorOrReadOnly]
    serializer_class = VulnerabilitySerializer
    pagination_class = MyPageNumberPagination
    queryset = Vulnerability.objects.all()
    filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter]
    filterset_fields = ['status']
    ordering_fields = ['id', 'create_time']
    search_fields = ['url']


class VulWorkflowViewSet(ModelViewSet):
    permission_classes = [VulIsEditorOrReadOnly]
    serializer_class = VulWorkflowSerializer
    pagination_class = MyPageNumberPagination
    queryset = VulWorkflow.objects.all()
    filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter, VulWorkflowFilterBackend]
    filterset_fields = ['vulnerability__status']
    ordering_fields = ['id', 'vulnerability__create_time']
    search_fields = ['title', 'vulnerability__url']

    # def destroy(self, request, *args, **kwargs):
    #     vul_workflow = VulWorkflow.objects.get(pk=kwargs['pk'])
    #     vul_workflow.vulnerability.delete()
    #     return super(VulWorkflowViewSet, self).destroy(request, *args, **kwargs)


class VulSubWorkflowViewSet(ModelViewSet):
    serializer_class = VulSubWorkflowSerializer
    pagination_class = MyPageNumberPagination
    queryset = VulSubWorkflow.objects.all()
