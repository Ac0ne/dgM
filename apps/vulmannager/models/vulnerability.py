from django.db import models
from apps.backend.models import User
from apps.vulmannager.models.penetration_test_ticket import PenetrationTestTicketResult
from apps.vulmannager.models.asset import Asset


class VulWorkflow(models.Model):
    RESOURCES = (
        ("external", "外部SRC平台"),
        ("internal", "内部渗透测试"),
    )
    title = models.CharField("标题", max_length=128)
    asset = models.ForeignKey(Asset, on_delete=models.CASCADE, related_name='vul_work_flows')
    resource = models.CharField("来源", max_length=30, choices=RESOURCES)


class Vulnerability(models.Model):
    RANKS = (
        # ("S", "严重"),
        ("H", "高危"),
        ("M", "中危"),
        ("L", "低危")
    )
    START, FIXING, RETEST, FIXED = 0, 1, 2, 3
    STATUS = (
        (START, "创建"),
        (FIXING, "修复中"),
        (RETEST, "复测中"),
        (FIXED, "已修复")
    )
    VUL_TYPES = (
        ("File Inclusion", "文件包含"),
        ("UXSS", "UXSS通用跨站脚本"),
        ("XSS", "XSS跨站脚本"),
        ("File Upload", "文件上传"),
        ("Weak Password", "弱口令"),
        ("Command Execution", "命令执行"),
        ("Code Execution", "代码执行"),
        ("Unauthorized access", "未授权&越权"),
        ("SQL Injection", "SQL注入"),
        ("SSRF", "SSRF服务器端请求伪造"),
        ("Arbitrary File Download", "任意文件下载"),
        ("Arbitrary File Read", "任意文件读取"),
        ("Arbitrary File Deletion", "任意文件删除"),
        ("Information Disclosure", "敏感信息泄漏"),
        ("XML Injection", "XXE外部实体注入"),
        # TODO: add more
        ("Unknown", "未知类型"),
    )

    reporter = models.ForeignKey(User, on_delete=models.CASCADE)
    status = models.IntegerField("状态", choices=STATUS, default=START)
    vul_type = models.CharField("漏洞类型", max_length=30, choices=VUL_TYPES)
    rank = models.CharField("危害等级", max_length=30, choices=RANKS)
    url = models.URLField("漏洞链接", max_length=888)
    description = models.TextField("漏洞描述")
    repair = models.TextField("修复方案", default="节约时间: 修复方案见xxx文档", blank=True, null=False)
    create_time = models.DateTimeField("创建时间", auto_now_add=True)

    penetration_test_ticket_result = models.ForeignKey(PenetrationTestTicketResult,
                                                       related_name='vulnerabilities',
                                                       on_delete=models.CASCADE,
                                                       blank=True, null=True)
    vul_workflow = models.OneToOneField(VulWorkflow, related_name='vulnerability',
                                        on_delete=models.CASCADE,
                                        blank=True, null=True)


class VulSubWorkflow(models.Model):
    vul_workflow = models.ForeignKey(VulWorkflow, on_delete=models.CASCADE, related_name='sub_workflow')
    transactor = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sub_vul_transactor')
    action = models.CharField("操作", max_length=10)
    workflow_description = models.TextField("处理意见", blank=True, null=False)
    update_time = models.DateTimeField("更新时间", auto_now=True)
