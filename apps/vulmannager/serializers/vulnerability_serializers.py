# -*- coding: utf-8 -*-
# author: zltningx


from rest_framework.serializers import ModelSerializer, ListSerializer

from apps.vulmannager.models import (Vulnerability, VulWorkflow, VulSubWorkflow, Asset)
from apps.backend.serializers import UserReturnSerializer
from apps.vulmannager.serializers.asset_serializers import AssetSerializer


# class VulnerabilitySerializer(ModelSerializer):
#     class Meta:
#         model = Vulnerability
#         fields = ('id', 'reporter', 'status', 'vul_type', 'rank',
#                   'url', 'description', 'repair', 'create_time',
#                   'penetration_test_ticket_result')


class VulnerabilityListSerializer(ListSerializer):
    def create(self, validated_data):
        vulnerabilities = []
        for item in validated_data:
            v = Vulnerability.objects.create(**item)
            vulnerabilities.append(v)
        return vulnerabilities


class VulnerabilitySerializer(ModelSerializer):
    reporter = UserReturnSerializer(many=False, read_only=True)

    class Meta:
        list_serializer_class = VulnerabilityListSerializer
        model = Vulnerability
        fields = ('id', 'reporter', 'status', 'vul_type', 'rank',
                  'url', 'description', 'repair', 'create_time',
                  'penetration_test_ticket_result', 'vul_workflow')


class VulSubWorkflowSerializer(ModelSerializer):
    transactor = UserReturnSerializer(many=False, read_only=True)

    class Meta:
        model = VulSubWorkflow
        fields = '__all__'

    def create(self, validated_data):
        validated_data['transactor'] = self.context['request'].user
        instance = super(VulSubWorkflowSerializer, self).create(validated_data)
        instance.save()
        return instance


class VulWorkflowSerializer(ModelSerializer):
    vulnerability = VulnerabilitySerializer(many=False, required=False)
    sub_workflow = VulSubWorkflowSerializer(many=True, required=False, read_only=True)

    class Meta:
        model = VulWorkflow
        fields = ('id', 'title', 'asset', 'vulnerability', 'resource', 'sub_workflow')

    def create(self, validated_data):
        if validated_data.__contains__('sub_workflow'):
            validated_data.pop('sub_workflow')
        if validated_data.__contains__('vulnerability'):
            vulnerability_data = validated_data.pop('vulnerability')
            instance = VulWorkflow.objects.create(**validated_data)
            vulnerability_data['reporter'] = self.context['request'].user
            vulnerability = Vulnerability.objects.create(**vulnerability_data)
            vulnerability.vul_workflow = instance
            vulnerability.save()
        else:
            instance = VulWorkflow.objects.create(**validated_data)
        instance.save()
        return instance

    def update(self, instance, validated_data):
        if validated_data.__contains__('sub_workflow'):
            validated_data.pop('sub_workflow')
        nested_serializer = self.fields['vulnerability']
        nested_instance = instance.vulnerability
        nested_data = validated_data.pop('vulnerability')
        nested_serializer.update(nested_instance, nested_data)
        return super(VulWorkflowSerializer, self).update(instance, validated_data)
