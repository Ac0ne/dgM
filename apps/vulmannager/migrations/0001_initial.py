# Generated by Django 2.2.6 on 2019-11-28 07:43

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PenetrationTestTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, '草稿'), (1, '审核并分配测试人员'), (2, '测试中'), (3, '测试完成')], default=0, verbose_name='状态')),
                ('title', models.CharField(max_length=128, verbose_name='标题')),
                ('priority', models.IntegerField(choices=[(3, 'P0'), (2, 'P1'), (1, 'P2')], default=1, verbose_name='优先级')),
                ('department', models.CharField(blank=True, max_length=28, verbose_name='业务线(部门)')),
                ('dead_line', models.DateTimeField(verbose_name='期望最晚完成时间')),
                ('description', models.TextField(default='请输入测试域名、测试账号和其它必要测试信息 以供安全测试', verbose_name='描述')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PenetrationTestTicketResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_description', models.TextField(blank=True, default='描述测试的结果', verbose_name='渗透结果描述')),
                ('tester', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='tester', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, '创建'), (1, '修复中'), (2, '复测中'), (3, '已修复')], default=0, verbose_name='状态')),
                ('vul_type', models.CharField(choices=[('File Inclusion', '文件包含'), ('UXSS', 'UXSS通用跨站脚本'), ('XSS', 'XSS跨站脚本'), ('File Upload', '文件上传'), ('Weak Password', '弱口令'), ('Command Execution', '命令执行'), ('Code Execution', '代码执行'), ('Unauthorized access', '未授权&越权'), ('SQL Injection', 'SQL注入'), ('SSRF', 'SSRF服务器端请求伪造'), ('Arbitrary File Download', '任意文件下载'), ('Arbitrary File Read', '任意文件读取'), ('Arbitrary File Deletion', '任意文件删除'), ('Information Disclosure', '敏感信息泄漏'), ('XML Injection', 'XXE外部实体注入')], max_length=30, verbose_name='漏洞类型')),
                ('rank', models.CharField(choices=[('H', '高危'), ('M', '中危'), ('L', '低危')], max_length=30, verbose_name='危害等级')),
                ('url', models.URLField(max_length=888, verbose_name='漏洞链接')),
                ('description', models.TextField(verbose_name='漏洞描述')),
                ('repair', models.TextField(blank=True, default='节约时间: 修复方案见xxx文档', verbose_name='修复方案')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('penetration_test_ticket_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vulnerabilities', to='vulmannager.PenetrationTestTicketResult')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VulWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='标题')),
                ('resource', models.CharField(choices=[('external', '外部SRC平台'), ('internal', '内部渗透测试')], max_length=30, verbose_name='来源')),
                ('vulnerability', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='vulmannager.Vulnerability')),
            ],
        ),
        migrations.CreateModel(
            name='VulSubWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workflow_description', models.TextField(blank=True, verbose_name='处理意见')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('transactor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vul_transactor', to=settings.AUTH_USER_MODEL)),
                ('vul_workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vul_workflow', to='vulmannager.VulWorkflow')),
            ],
        ),
        migrations.CreateModel(
            name='PenetrationTestTicketSubWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workflow_description', models.TextField(blank=True, default='无', verbose_name='处理意见')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('penetration_test_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactor', to='vulmannager.PenetrationTestTicket')),
                ('transactor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pt_transactor', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='penetrationtestticket',
            name='ticket_result',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='vulmannager.PenetrationTestTicketResult'),
        ),
        migrations.AddField(
            model_name='penetrationtestticket',
            name='transactors',
            field=models.ManyToManyField(blank=True, related_name='transactors', to=settings.AUTH_USER_MODEL),
        ),
    ]
